version: '3.7'

services:

  traefik:
    image: traefik:v2.2
    restart: always
    command:
      #- --log.level=DEBUG
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.defaultrule=PathPrefix(`/{{ index .Labels "com.docker.compose.service" }}`)
      - --entryPoints.web.address=:80
      # default middleware for all dynamic routers. add slash and strip prefix.
      # we expect all backends to listen on bare slash route.
      - --entrypoints.web.http.middlewares=my-chain@docker
    labels:
      traefik.http.middlewares.add-slash.redirectregex.regex: ^(https?://[^/]+/[\w-]+)$$
      traefik.http.middlewares.add-slash.redirectregex.replacement: $${1}/
      traefik.http.middlewares.add-slash.redirectregex.permanent: true
      traefik.http.middlewares.strip.stripprefixregex.regex: /[\w-]+
      traefik.http.middlewares.my-chain.chain.middlewares: add-slash,strip
    ports:
      # The HTTP port
      - "80:80"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # Traefik listens to Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - isengard

  whoami:
    # A container that exposes an API to show its IP address
    image: containous/whoami
    restart: always
    networks:
      - isengard

  bedtime:
    build: ./bedtime
    restart: always
    volumes:
      - "~/.python_hue:/root/.python_hue"
    networks:
      - isengard

  # Define a Telegraf service
  telegraf:
    image: telegraf:1.13.4
    restart: always
    environment:
      HOST_PROC: /host/proc
    links:
      - influxdb
    #ports:
    #  - "8092:8092/udp"
    #  - "8094:8094"
    #  - "8125:8125/udp"
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /proc:/host/proc:ro
      # for cpu temp
      - /sys/class/thermal/thermal_zone0/temp:/sys/class/thermal/thermal_zone0/temp:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - isengard

  # Define an InfluxDB service
  influxdb:
    image: influxdb:1.7
    restart: always
    volumes:
      - ./data/influxdb:/var/lib/influxdb
    networks:
      - isengard

  # Define a service for using the influx CLI tool.
  # docker-compose run influxdb-cli
  influxdb-cli:
    image: influxdb:1.3.5
    entrypoint:
      - influx
      - -host
      - influxdb
    links:
      - influxdb
    networks:
      - isengard

  # Define a Chronograf service
  chronograf:
    image: chronograf:1.8.0
    restart: always
    environment:
      INFLUXDB_URL: http://influxdb:8086
      #KAPACITOR_URL: http://kapacitor:9092
      BASE_PATH: /chronograf
      #LOG_LEVEL: DEBUG
    labels:
      # we add back 'chronograf' prefix before forwarding request.
      - "traefik.http.middlewares.add-chronograf-prefix.addprefix.prefix=/chronograf"
      - "traefik.http.routers.chronograf.middlewares=add-chronograf-prefix@docker"
    links:
      - influxdb
      #- kapacitor
    networks:
      - isengard

  grafana:
    image: grafana/grafana:6.6.2
    restart: always
    environment:
        GF_AUTH_ANONYMOUS_ENABLED: "true"
        GF_SERVER_DOMAIN: "isengard.local"
        GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s/grafana/"
        GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    links:
      - influxdb
    networks:
      - isengard
    volumes:
      - grafana_data:/var/lib/grafana

  # flask microservice for sending sms text
  # POST to http://sms:5000/send
  sms:
    build: ./sms
    restart: always
    environment:
      - TWILIO_ACCOUNT_SID
      - TWILIO_AUTH_TOKEN
      - TWILIO_SENDER
      - TWILIO_NOTIFY_TO
    networks:
      - isengard

  exhaust-fan:
    build: ./exhaust-fan
    restart: always
    # for plug discovery
    network_mode: host

  living-room-intake-fan:
    build: ./living-room-intake-fan
    restart: always
    # for plug discovery
    network_mode: host
    environment:
      - OPEN_WEATHER_MAP_KEY
      - ZIP_CODE

  ethmon:
    build: ./ethmon
    restart: always
    environment:
      - ETHMON_ADDRESS
      - ETHMON_TO_NUMBERS

volumes:
  grafana_data:

networks:
  isengard:
    external: True

